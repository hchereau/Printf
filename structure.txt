# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    structure.txt                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: hchereau <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/02/02 12:37:54 by hchereau          #+#    #+#              #
#    Updated: 2023/02/04 15:29:02 by hchereau         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

printf
process:
1	-> parcourir chaine jusqu'a trouver un %
2	-> regarder si le caractere derriere le % est un caractere valable
3	-> se referer a l'argurment suivant pour afficher
4	-> afficher tout
5	-> return le nombre de caractere imprimer

1 -> while

2 -> fonction how_printable(car)

3 -> tab fonction

4 -> write str_final

5 return ft_strlen(str_final)
	
passer en int la chaine total puis la return

how_printable:
but: retourner l'index du meme caractere que l'input
input : caractere apres un %
output : l'index de la liste correspondant au caractere ou -1 si le caractere n'est pas dans la liste
process :
	-> parcourir la liste
	-> si element liste == carac
		-> return index
	-> return -1

get_arg_c:
but: ajouter l'arg %c dans le buffer
input : va_list buffer
outputs: taille arg + buffer
process:
	-> appelle add_buffer string
	-> si add_string renvoie autre chose que -1
		-> ajouter le buffer a str_final
		-> ft_bzero sur le buffer

add_buffer:
but: remplir le buffer
input: buffer, va_list, index_buffer
outputs:
process:
	-> verifie si src + index_buffer est plus grand que la taille du buffer
		-> remplie src dans buffer
	->remplie 

 

static int	(*handlers[])(t_print *print, va_list valist)
		= {hdl_c, hdl_s, hdl_ps, hdl_p, hdl_di, hdl_di, hdl_u, hdl_x, hdl_x};

static void *(*funcs[])(void *, const void, size_t) = {memcpy, inverse_memcpy};
	return (funcs[dest < src](dest, src, n));
