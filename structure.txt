# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    structure.txt                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: hchereau <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/02/02 12:37:54 by hchereau          #+#    #+#              #
#    Updated: 2023/02/04 15:29:02 by hchereau         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

printf
process:
	-> return (write(1, get_string_final, len_str_final))
 
get_string_final
inputs: struct buffer_data, struct string_final_data
outputs: string final
process:
	-> ft_bzero sur le buffer
	-> while sur la string
	->	si %, appelle how-printable pour savoir si comment mettre le caractère dans le buffer
	-> si how_printable == -1
		-> mettre le pourcentage dans le buffer et passé a la suite avec add_buffer_string
	-> sinon appeller la fonction correspondant au caractere dans le tableau de fonction
	->fin du while
	-> return (str_final);

add_buffer_string
inputs: struct buffer_data, struct string_final_data, char	*string
outputs: rien
process:
	-> si l'index_buffer + ft_strlen(string) <= BUFFER_SIZE_PRINTF
		-> copier la string dans le buffer avec strlcpy
	-> sinon
		-> remplir les dernier character dans le buffer avec add_last_buffer
		-> remplir str_final avec buffer avec add_str
		-> bzero buffer
		-> rappeller add_buffer_string avec l'index du dernier character de str copié

 
static int	(*handlers[])(t_print *print, va_list valist)
		= {hdl_c, hdl_s, hdl_ps, hdl_p, hdl_di, hdl_di, hdl_u, hdl_x, hdl_x};

static void *(*funcs[])(void *, const void, size_t) = {memcpy, inverse_memcpy};
	return (funcs[dest < src](dest, src, n));
