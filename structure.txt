# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    structure.txt                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: hchereau <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/02/02 12:37:54 by hchereau          #+#    #+#              #
#    Updated: 2023/02/04 15:29:02 by hchereau         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

printf
process:
1	-> parcourir chaine jusqu'a trouver un %
2	-> regarder si le caractere derriere le % est un caractere valable
3	-> se referer a l'argurment suivant pour afficher
4	-> afficher tout
5	-> return le nombre de caractere imprimer

1 -> while

2 -> fonction how_printable(car)

3 -> stocker du  dernier % au prochain % dans buffer puis add l'argument correspondant ( si arg ou str trop grand pour rentrer dans le buffer, afficher le buffer, puis l'arg puis remettre a zero le buffer )
	- > utiliser itoa base pour les fonction convertissant dans d'autre type
	
passer en int la chaine total puis la return

how_printable:
but: retourner l'index du meme caractere que l'input
input : caractere apres un %
output : l'index de la liste correspondant au caractere ou -1 si le caractere n'est pas dans la liste
process :
	-> parcourir la liste
	-> si element liste == carac
		-> return index
	-> return -1

get_arg_c:
but: ajouter l'arg %c dans le buffer
input : va_list buffer
outputs: taille arg + buffer
process:
	-> verifier si le buffer a assez d'espace pour le caractere
	-> concatener le caractere au buffer
	-> return le la size 

add_buffer:
but: remplir le buffer
input: buffer, va_list, index_buffer
outputs: 1 si ca a marcher, 0 i le buffer est plein


pour remplir le buffer: variable i 

[200~static int	(*handlers[])(t_print *print, va_list valist)
		= {hdl_c, hdl_s, hdl_ps, hdl_p, hdl_di, hdl_di, hdl_u, hdl_x, hdl_x};
